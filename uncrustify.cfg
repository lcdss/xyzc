# Uncrustify 0.64

#
# General options
#

# The type of line endings. Default=Auto
newlines                        = lf     # auto/lf/crlf/cr

# The original size of tabs in the input. Default=8
input_tab_size                  = 2        # number

# The size of tabs in the output (only used if align_with_tabs=true). Default=8
output_tab_size                 = 2        # number

# Control what to do with the UTF-8 BOM (recommend 'remove')
utf8_bom                        = remove   # ignore/add/remove/force

# If the file contains bytes with values between 128 and 255, but is not UTF-8, then output as UTF-8
utf8_byte                       = true    # false/true

# Force the output encoding to UTF-8
utf8_force                      = true    # false/true

#
# Indenting
#

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8. Default=8
indent_columns                  = 2        # number

# The continuation indent. If non-zero, this overrides the indent of '(' and '=' continuation indents.
# For FreeBSD, this is set to 4. Negative value is absolute and not increased for each ( level
indent_continue                 = 2        # number

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs to brace level, align with spaces (default)
# 2=indent and align with tabs, using spaces when not on a tabstop
indent_with_tabs                = 0        # number

#
# Spacing options
#

# Add or remove space around arithmetic operator '+', '-', '/', '*', etc
# also '>>>' '<<' '>>' '%' '|'
sp_arith                        = add   # ignore/add/remove/force

# Add or remove space around assignment operator '=', '+=', etc
sp_assign                       = add   # ignore/add/remove/force

# Add or remove space around boolean operators '&&' and '||'
sp_bool                         = add   # ignore/add/remove/force

# Add or remove space around compare operator '<', '>', '==', etc
sp_compare                      = add   # ignore/add/remove/force

# Add or remove space inside '(' and ')'
sp_inside_paren                 = remove   # ignore/add/remove/force

# Add or remove space between nested parens: '((' vs ') )'
sp_paren_paren                  = remove   # ignore/add/remove/force

# Add or remove space before pointer star '*'
sp_before_ptr_star              = add   # ignore/add/remove/force

# Add or remove space between pointer stars '*'
sp_between_ptr_star             = remove   # ignore/add/remove/force

# Add or remove space after pointer star '*', if followed by a word.
sp_after_ptr_star               = remove   # ignore/add/remove/force

# Add or remove space after pointer star '*', if followed by a qualifier.
sp_after_ptr_star_qualifier     = add   # ignore/add/remove/force

# Add or remove space after a pointer star '*', if followed by a func proto/def.
sp_after_ptr_star_func          = add   # ignore/add/remove/force

# Add or remove space after a pointer star '*', if followed by an open paren (function types).
sp_ptr_star_paren               = add   # ignore/add/remove/force

# Add or remove space after a pointer star '*', if followed by a func proto/def.
sp_after_ptr_star_func          = add   # ignore/add/remove/force

# Add or remove space before '(' of 'if', 'for', 'switch', 'while', etc.
sp_before_sparen                = add   # ignore/add/remove/force

# Add or remove space inside if-condition '(' and ')'
sp_inside_sparen                = remove   # ignore/add/remove/force

# Add or remove space between ')' and '{' of 'if', 'for', 'switch', and 'while', etc.
sp_sparen_brace                 = add   # ignore/add/remove/force

# Add or remove space inside a non-empty '[' and ']'
sp_inside_square                = remove   # ignore/add/remove/force

# Add or remove space after ','
sp_after_comma                  = add   # ignore/add/remove/force

# Add or remove space between ',' and ']' in multidimensional array type 'int[,,]'
sp_after_mdatype_commas         = add   # ignore/add/remove/force

# Add or remove space between '[' and ',' in multidimensional array type 'int[,,]'
sp_before_mdatype_commas        = remove   # ignore/add/remove/force

# Add or remove space inside enum '{' and '}'
sp_inside_braces_enum           = add   # ignore/add/remove/force

# Add or remove space inside struct/union '{' and '}'
sp_inside_braces_struct         = remove   # ignore/add/remove/force

# Add or remove space inside '{' and '}'
sp_inside_braces                = remove   # ignore/add/remove/force

# Add or remove space inside '{}'
sp_inside_braces_empty          = remove   # ignore/add/remove/force

# Add or remove space between return type and function name
# A minimum of 1 is forced except for pointer return types.
sp_type_func                    = add   # ignore/add/remove/force

# Add or remove space between function name and '(' on function declaration
sp_func_proto_paren             = remove   # ignore/add/remove/force

# Add or remove space between function name and '()' on function declaration without parameters
sp_func_proto_paren_empty       = remove   # ignore/add/remove/force

# Add or remove space between function name and '(' on function definition
sp_func_def_paren               = remove   # ignore/add/remove/force

# Add or remove space between function name and '()' on function definition without parameters
sp_func_def_paren_empty         = remove   # ignore/add/remove/force

# Add or remove space between 'return' and '('
sp_return_paren                 = add   # ignore/add/remove/force

# Add or remove space between 'else' and '{' if on the same line
sp_else_brace                   = add   # ignore/add/remove/force

# Add or remove space between '}' and 'else' if on the same line
sp_brace_else                   = add   # ignore/add/remove/force

# Add or remove space between '}' and the name of a typedef on the same line
sp_brace_typedef                = add   # ignore/add/remove/force

# Add or remove space after C/D cast, i.e. 'cast(int)a' vs 'cast(int) a' or '(int)a' vs '(int) a'
sp_after_cast                   = add   # ignore/add/remove/force

# Add or remove space around the ':' in 'b ? t : f'
sp_cond_colon                   = add   # ignore/add/remove/force

# Add or remove space around the '?' in 'b ? t : f'
sp_cond_question                = add   # ignore/add/remove/force

# In the abbreviated ternary form (a ?: b), add/remove space between ? and :.'. Overrides all other sp_cond_* options.
sp_cond_ternary_short           = remove   # ignore/add/remove/force

#
# Newline adding and removing options
#

# Add or remove newline between a function call's ')' and '{', as in:
# list_for_each(item, &list) { }
nl_fcall_brace                  = add   # ignore/add/remove/force

# Add or remove newline between 'enum' and '{'
nl_enum_brace                   = remove   # ignore/add/remove/force

# Add or remove newline between 'struct and '{'
nl_struct_brace                 = remove   # ignore/add/remove/force

# Add or remove newline between 'union' and '{'
nl_union_brace                  = remove   # ignore/add/remove/force

# Add or remove newline between 'if' and '{'
nl_if_brace                     = remove   # ignore/add/remove/force

# Add or remove newline between '}' and 'else'
nl_brace_else                   = remove   # ignore/add/remove/force

# Add or remove newline between 'else if' and '{'
# If set to ignore, nl_if_brace is used instead
nl_elseif_brace                 = remove   # ignore/add/remove/force

# Add or remove blank line before 'if'
nl_before_if                    = ignore   # ignore/add/remove/force

# Add or remove blank line after 'if' statement
nl_after_if                     = ignore   # ignore/add/remove/force

# Add or remove blank line before 'for'
nl_before_for                   = ignore   # ignore/add/remove/force

# Add or remove blank line after 'for' statement
nl_after_for                    = ignore   # ignore/add/remove/force

# Add or remove blank line before 'while'
nl_before_while                 = ignore   # ignore/add/remove/force

# Add or remove blank line after 'while' statement
nl_after_while                  = ignore   # ignore/add/remove/force

# Add or remove blank line before 'switch'
nl_before_switch                = ignore   # ignore/add/remove/force

# Add or remove blank line after 'switch' statement
nl_after_switch                 = ignore   # ignore/add/remove/force

# Add or remove blank line before 'do'
nl_before_do                    = ignore   # ignore/add/remove/force

# Add or remove blank line after 'do/while' statement
nl_after_do                     = ignore   # ignore/add/remove/force

# Add or remove newline between a function call's ')' and '{', as in:
# list_for_each(item, &list) { }
nl_fcall_brace                  = add   # ignore/add/remove/force

# Add or remove newline between 'enum' and '{'
nl_enum_brace                   = remove   # ignore/add/remove/force

# Add or remove newline between 'struct and '{'
nl_struct_brace                 = remove   # ignore/add/remove/force

# Add or remove newline between 'union' and '{'
nl_union_brace                  = remove   # ignore/add/remove/force

# Add or remove newline between 'if' and '{'
nl_if_brace                     = remove   # ignore/add/remove/force

# Add or remove newline between '}' and 'else'
nl_brace_else                   = remove   # ignore/add/remove/force

# Add or remove newline between 'else if' and '{'
# If set to ignore, nl_if_brace is used instead
nl_elseif_brace                 = remove   # ignore/add/remove/force

# Add or remove newline between 'else' and '{'
nl_else_brace                   = remove   # ignore/add/remove/force

# Add or remove newline between 'else' and 'if'
nl_else_if                      = remove   # ignore/add/remove/force

# Add or remove newline between 'for' and '{'
nl_for_brace                    = remove   # ignore/add/remove/force

# Add or remove newline between 'do' and '{'
nl_do_brace                     = remove   # ignore/add/remove/force

# Add or remove newline between '}' and 'while' of 'do' statement
nl_brace_while                  = remove   # ignore/add/remove/force

# Add or remove newline between 'switch' and '{'
nl_switch_brace                 = remove   # ignore/add/remove/force

#
# Blank line options
#

# The maximum consecutive newlines (3 = 2 blank lines)
nl_max                          = 2        # number

# Whether to remove blank lines after '{'
eat_blanks_after_open_brace     = true    # false/true

# Whether to remove blank lines before '}'
eat_blanks_before_close_brace   = true    # false/true

# Whether to put a blank line before 'return' statements, unless after an open brace.
nl_before_return                = true    # false/true

#
# Code modifying options (non-whitespace)
#

# Add or remove braces on single-line 'do' statement
mod_full_brace_do               = add   # ignore/add/remove/force

# Add or remove braces on single-line 'for' statement
mod_full_brace_for              = add   # ignore/add/remove/force

# Add or remove braces on single-line function definitions. (Pawn)
mod_full_brace_function         = add   # ignore/add/remove/force

# Add or remove braces on single-line 'if' statement. Will not remove the braces if they contain an 'else'.
mod_full_brace_if               = add   # ignore/add/remove/force

# Make all if/elseif/else statements in a chain be braced or not. Overrides mod_full_brace_if.
# If any must be braced, they are all braced.  If all can be unbraced, then the braces are removed.
mod_full_brace_if_chain         = false    # false/true

# Make all if/elseif/else statements with at least one 'else' or 'else if' fully braced.
# If mod_full_brace_if_chain is used together with this option, all if-else chains will get braces,
# and simple 'if' statements will lose them (if possible).
mod_full_brace_if_chain_only    = true    # false/true

# Add or remove braces on single-line 'while' statement
mod_full_brace_while            = add   # ignore/add/remove/force

# Add or remove unnecessary paren on 'return' statement
mod_paren_on_return             = remove   # ignore/add/remove/force

# Whether to change optional semicolons to real semicolons
mod_pawn_semicolon              = false    # false/true

# Add parens on 'while' and 'if' statement around bools
mod_full_paren_if_bool          = false    # false/true

# Whether to remove superfluous semicolons
mod_remove_extra_semicolon      = true    # false/true

# If a function body exceeds the specified number of newlines and doesn't have a comment after
# the close brace, a comment will be added.
mod_add_long_function_closebrace_comment = 0        # number

# If a switch body exceeds the specified number of newlines and doesn't have a comment after
# the close brace, a comment will be added.
mod_add_long_switch_closebrace_comment = 0        # number

# If an #ifdef body exceeds the specified number of newlines and doesn't have a comment after
# the #endif, a comment will be added.
mod_add_long_ifdef_endif_comment = 0        # number

# If an #ifdef or #else body exceeds the specified number of newlines and doesn't have a comment after
# the #else, a comment will be added.
mod_add_long_ifdef_else_comment = 0        # number

# If TRUE, it will move a 'break' that appears after a fully braced 'case' before the close brace.
mod_move_case_break             = true    # false/true

# Will add or remove the braces around a fully braced case statement.
# Will only remove the braces if there are no variable declarations in the block.
mod_case_brace                  = remove   # ignore/add/remove/force

# If TRUE, it will remove a void 'return;' that appears as the last statement in a function.
mod_remove_empty_return         = true    # false/true
