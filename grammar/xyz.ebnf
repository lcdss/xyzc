NonZeroDigit ::= [1-9];
Digit ::= [0] | NonZeroDigit;
SmallLetter ::= [a-z];
BigLetter ::= [A-Z];
Letter ::= SmallLetter | BigLetter;
Sign ::= [+-];
Integer ::= Sign? NonZeroDigit Digit* | '0';
Char ::= '"' Letter* '"';
Decimal ::= Integer '.' Integer;
Identifier ::= '&' SmallLetter (Letter | Digit)*;
IdentifierList ::= Identifier (',' Identifier)*;
TypeSpecifier ::= int | char | decimal;
RelationalOperator ::= [<>] '='? | [=!] '=';
LogicalOperator ::= '&&' | '||';
AditiveOperator ::= [+-];
MultiplicativeOperator ::= [*/];
NumericFactor ::= Identifier | Integer | Decimal;
Factor ::= NumericFactor | Char;
Term ::= Factor ArithmeticOperator Factor;
Expression ::= '(' Expression ')' | Term ;
ConditionalExpression ::= '(' ConditionalExpression ')' | Term LogicalOperator Term ;
IntegerDeclaration ::= int Identifier ('=' Expression)? (',' Identifier ('=' Expression)?)*;
CharDeclaration ::= char Identifier '(' Integer ')' ('=' Expression)?;
DecimalDeclaration ::= dec Identifier '(' Decimal ')' '=' Expression;
DeclarationStatement ::= (IntegerDeclaration | CharDeclaration | DecimalDeclaration) ';';
Statement ::= IfStatement | DeclarationStatement;
StatementSequence ::= '{' Statement '}';
IfStatement ::= if '(' ConditionalExpression ')' StatementSequence else StatementSequence;
ForStatement ::= for '(' DeclarationStatement ';' ConditionalExpression ';' AssignmentStatement ')' StatementSequence;
GetsStatement ::= gets '(' IdentifierList ')';
PutsStatement ::= puts '(' Factor (',' Factor)* ')';
